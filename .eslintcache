[{"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\index.tsx":"1","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-editor.tsx":"2","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\preview.tsx":"3","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\index.ts":"4","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\unpkg-path-plugin.ts":"5","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\fetch-plugin.ts":"6","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-cell.tsx":"7"},{"size":990,"mtime":1612370014792,"results":"8","hashOfConfig":"9"},{"size":2753,"mtime":1612354570639,"results":"10","hashOfConfig":"9"},{"size":1599,"mtime":1612368631878,"results":"11","hashOfConfig":"9"},{"size":1704,"mtime":1612369166673,"results":"12","hashOfConfig":"9"},{"size":1238,"mtime":1612011614755,"results":"13","hashOfConfig":"9"},{"size":2979,"mtime":1612021504282,"results":"14","hashOfConfig":"9"},{"size":1884,"mtime":1612369810550,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jtqin5",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\index.tsx",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-editor.tsx",["32"],"import { useRef } from 'react'\r\nimport './code-editor.css'\r\nimport './131 syntax.css'\r\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\r\nimport prettier from 'prettier';\r\nimport parser from 'prettier/parser-babel'\r\nimport { editor } from 'monaco-editor';\r\nimport codeshift from 'jscodeshift'\r\nimport Highlighter from 'monaco-jsx-highlighter'\r\n\r\n\r\ninterface CodeEditorProps {\r\n  initialValue : string;\r\n  onChange(value: string) : void;\r\n}\r\n\r\nconst CodeEditor : React.FC<CodeEditorProps> = ({ initialValue,onChange }) => {\r\n  const editorRef = useRef<any>();   // to get the code value from the editor and format it through prettier and again set the code value to the editor \r\n\r\n  const onEditorDidMount : EditorDidMount = (getValue, monacoEditor) => { // this function is used to get the current value in the editor...\r\n    // console.log(getValue())\r\n    editorRef.current = monacoEditor;   // we can also make the reference to some value also and can use it anywhere in the app.... \r\n    monacoEditor.onDidChangeModelContent(() => { // we get the console.log() on every change made on the editor..\r\n      onChange(getValue());\r\n    });\r\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2})\r\n\r\n    const highlighter = new Highlighter(\r\n      // @ts-ignore\r\n      window.monaco,\r\n      codeshift,\r\n      monacoEditor\r\n    );\r\n    highlighter.highLightOnDidChangeModelContent(\r\n      () => {},\r\n      () => {},\r\n      undefined,\r\n      () => {}\r\n    );\r\n  }\r\n\r\n  const onFormatClick = () => {\r\n    //! get the current value from the editor\r\n    // console.log(editorRef.current);\r\n    const unformatted = editorRef.current.getModel().getValue();\r\n\r\n    //! format the value \r\n    const formatted = prettier.format(unformatted, {\r\n      parser: 'babel',\r\n      plugins : [parser],\r\n      useTabs : false,\r\n      semi : true,\r\n      singleQuote : true\r\n    }).replace(/\\n$/,'');\r\n\r\n    //! set the formated value again in the editor\r\n    editorRef.current.setValue(formatted);\r\n  }\r\n  \r\n  return (\r\n  <div className=\"editor-wrapper\">\r\n    <button \r\n      className=\"button button-format is-primary is-small\" \r\n      onClick={onFormatClick}\r\n    >Format Code</button>\r\n    <MonacoEditor  \r\n      editorDidMount = {onEditorDidMount}\r\n      value = {initialValue} \r\n      options={{\r\n        wordWrap:\"on\",\r\n        cursorBlinking: \"expand\",\r\n        fontLigatures: true,\r\n        minimap: { enabled: false },\r\n        showUnused: false,\r\n        folding:false,\r\n        lineNumbersMinChars: 3,\r\n        fontSize: 16,\r\n        scrollBeyondLastLine: false,\r\n        automaticLayout:true,\r\n      }}\r\n      language=\"javascript\" \r\n      theme=\"vs-dark\" \r\n      height=\"500px\" \r\n    />\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n",["33","34"],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\preview.tsx",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\index.ts",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\unpkg-path-plugin.ts",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\fetch-plugin.ts",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-cell.tsx",[],{"ruleId":"35","severity":1,"message":"36","line":7,"column":10,"nodeType":"37","messageId":"38","endLine":7,"endColumn":16},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"@typescript-eslint/no-unused-vars","'editor' is defined but never used.","Identifier","unusedVar","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]