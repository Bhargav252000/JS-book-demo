[{"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\index.tsx":"1","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-editor.tsx":"2","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\preview.tsx":"3","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\index.ts":"4","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\unpkg-path-plugin.ts":"5","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\fetch-plugin.ts":"6","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-cell.tsx":"7","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\resizable.tsx":"8"},{"size":990,"mtime":1612370014792,"results":"9","hashOfConfig":"10"},{"size":2752,"mtime":1612429289311,"results":"11","hashOfConfig":"10"},{"size":2297,"mtime":1612976661951,"results":"12","hashOfConfig":"10"},{"size":2142,"mtime":1612970166503,"results":"13","hashOfConfig":"10"},{"size":1238,"mtime":1612011614755,"results":"14","hashOfConfig":"10"},{"size":2979,"mtime":1612021504282,"results":"15","hashOfConfig":"10"},{"size":2553,"mtime":1612976449933,"results":"16","hashOfConfig":"10"},{"size":2229,"mtime":1612465297753,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"jtqin5",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\index.tsx",[],["37","38"],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-editor.tsx",["39"],"import { useRef } from 'react'\r\nimport './code-editor.css'\r\nimport './131 syntax.css'\r\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\r\nimport prettier from 'prettier';\r\nimport parser from 'prettier/parser-babel'\r\nimport { editor } from 'monaco-editor';\r\nimport codeshift from 'jscodeshift'\r\nimport Highlighter from 'monaco-jsx-highlighter'\r\n\r\n\r\ninterface CodeEditorProps {\r\n  initialValue : string;\r\n  onChange(value: string) : void;\r\n}\r\n\r\nconst CodeEditor : React.FC<CodeEditorProps> = ({ initialValue,onChange }) => {\r\n  const editorRef = useRef<any>();   // to get the code value from the editor and format it through prettier and again set the code value to the editor \r\n\r\n  const onEditorDidMount : EditorDidMount = (getValue, monacoEditor) => { // this function is used to get the current value in the editor...\r\n    // console.log(getValue())\r\n    editorRef.current = monacoEditor;   // we can also make the reference to some value also and can use it anywhere in the app.... \r\n    monacoEditor.onDidChangeModelContent(() => { // we get the console.log() on every change made on the editor..\r\n      onChange(getValue());\r\n    });\r\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2})\r\n\r\n    const highlighter = new Highlighter(\r\n      // @ts-ignore\r\n      window.monaco,\r\n      codeshift,\r\n      monacoEditor\r\n    );\r\n    highlighter.highLightOnDidChangeModelContent(\r\n      () => {},\r\n      () => {},\r\n      undefined,\r\n      () => {}\r\n    );\r\n  }\r\n\r\n  const onFormatClick = () => {\r\n    //! get the current value from the editor\r\n    // console.log(editorRef.current);\r\n    const unformatted = editorRef.current.getModel().getValue();\r\n\r\n    //! format the value \r\n    const formatted = prettier.format(unformatted, {\r\n      parser: 'babel',\r\n      plugins : [parser],\r\n      useTabs : false,\r\n      semi : true,\r\n      singleQuote : true\r\n    }).replace(/\\n$/,'');\r\n\r\n    //! set the formated value again in the editor\r\n    editorRef.current.setValue(formatted);\r\n  }\r\n  \r\n  return (\r\n  <div className=\"editor-wrapper\">\r\n    <button \r\n      className=\"button button-format is-primary is-small\" \r\n      onClick={onFormatClick}\r\n    >Format Code</button>\r\n    <MonacoEditor  \r\n      editorDidMount = {onEditorDidMount}\r\n      value = {initialValue} \r\n      options={{\r\n        wordWrap:\"on\",\r\n        cursorBlinking: \"expand\",\r\n        fontLigatures: true,\r\n        minimap: { enabled: false },\r\n        showUnused: false,\r\n        folding:false,\r\n        lineNumbersMinChars: 3,\r\n        fontSize: 16,\r\n        scrollBeyondLastLine: false,\r\n        automaticLayout:true,\r\n      }}\r\n      language=\"javascript\" \r\n      theme=\"vs-dark\" \r\n      height=\"100%\" \r\n    />\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n","C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\preview.tsx",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\index.ts",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\unpkg-path-plugin.ts",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\bundler\\plugins\\fetch-plugin.ts",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\code-cell.tsx",[],"C:\\Users\\BHARGAV\\Desktop\\React-Apps\\js-book-demo\\src\\components\\resizable.tsx",["40"],"import  { useEffect,useState } from 'react'\r\nimport { ResizableBox, ResizableBoxProps } from 'react-resizable'\r\nimport './resizable.css'\r\n\r\ninterface ResizableProps {\r\n    direction: 'horizontal' | 'vertical';\r\n\r\n}\r\n\r\nconst Resizable: React.FC<ResizableProps> = ({ direction, children }) => {\r\n    let resizableProps : ResizableBoxProps;\r\n    const [innerHeight, setInnerHeight] = useState(window.innerHeight);\r\n    const [innerWidth, setInnerWidth] = useState(window.innerWidth); \r\n    const [width,setWidth] = useState(window.innerWidth * 0.75);\r\n\r\n    useEffect(() => {\r\n        let timer : any;\r\n        const listener = () => {\r\n            if(timer){\r\n                clearTimeout(timer);\r\n            }\r\n            timer = setTimeout(() => {\r\n                setInnerHeight(window.innerHeight);\r\n                setInnerWidth(window.innerWidth);\r\n                if(window.innerWidth*0.75 < width){\r\n                    setWidth(window.innerWidth*0.75);\r\n                }\r\n            },100);\r\n        }\r\n        window.addEventListener('resize',listener);\r\n        \r\n        return () => {\r\n            window.removeEventListener('resize', listener);\r\n        }\r\n    },[]);\r\n\r\n    if(direction === 'vertical'){\r\n        resizableProps = {\r\n            height : 300,\r\n            width : Infinity,\r\n            maxConstraints : [Infinity,innerHeight * 0.9], // downward constraints 90% of the window browser Height\r\n            minConstraints : [Infinity, 50], // upper constraints \r\n            resizeHandles: ['s'],\r\n        };\r\n    }else{\r\n        resizableProps = {\r\n            className : 'resize-horizontal',\r\n            height : Infinity,\r\n            width : width,\r\n            minConstraints : [innerWidth * 0.2,Infinity], // upper constraints \r\n            maxConstraints : [innerWidth * 0.75,Infinity], // downward constraints 90% of the window browser Height\r\n            resizeHandles: ['e'],\r\n            onResizeStop : (event, data) => {\r\n                // console.log(data);\r\n                setWidth(data.size.width);\r\n            }\r\n        };\r\n    }\r\n    \r\n    return (\r\n    <ResizableBox { ...resizableProps }>\r\n        {children}\r\n    </ResizableBox>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Resizable;",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":7,"column":10,"nodeType":"47","messageId":"48","endLine":7,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":35,"column":7,"nodeType":"51","endLine":35,"endColumn":9,"suggestions":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'editor' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'width'. Either include it or remove the dependency array.","ArrayExpression",["55"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [width]",{"range":"58","text":"59"},[1179,1181],"[width]"]